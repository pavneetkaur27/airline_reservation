/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package adminui;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.table.DefaultTableModel;
import model.dao.FlightPriceDao;
import model.to.FlightPriceTo;
import utility.AllCommonOperations;

/**
 *
 * @author Pavneet
 */
public class ViewPriceDetails extends javax.swing.JInternalFrame {

    /**
     * Creates new form ViewPriceDetails
     */
    private int srno;
    private int srow;
    private JPopupMenu popup;
    private List<FlightPriceTo> alldetails;

    public ViewPriceDetails() {
        initComponents();
        srno = 0;
        bindTableDetails();
        tableflightprice.setRowHeight(25);
        
        tableflightprice.setShowGrid(true);
        tableflightprice.setBackground(new Color(0,150,200));
        tableflightprice.setForeground(Color.WHITE);
        tableflightprice.setSelectionBackground(Color.white);
        tableflightprice.setSelectionForeground(new Color(0,150,200));
       
        popup = new JPopupMenu();
        JMenuItem deleterecord = new JMenuItem(" Delete Record");
        deleterecord.setFont(new Font("Times New Roman", Font.BOLD, 25));
        JMenuItem editrecord = new JMenuItem(" Edit Record");
        editrecord.setFont(new Font("Times New Roman", Font.BOLD, 25));
        try {
            ImageIcon icon = new ImageIcon(getClass().getResource("/adminui/delete1.png"));
            deleterecord.setIcon(icon);
        } catch (Exception ex) {
        }
        try {
            ImageIcon icon = new ImageIcon(getClass().getResource("/adminui/add.png"));
            editrecord.setIcon(icon);
        } catch (Exception ex) {
        }
        popup.add(deleterecord);
        popup.add(editrecord);
        deleterecord.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                deleteRecord();
            }
        });

        editrecord.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                editRecord();
            }
        });
    }

    private void deleteRecord() {
        if (srno != 0) {
            int result = JOptionPane.showConfirmDialog(this, "Do You Really Want to Delete this record ?", "Message From System", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                FlightPriceTo ct = alldetails.get(srow);
                FlightPriceDao action = new FlightPriceDao();
                String message = "";
                if (action.deleteRecord(ct.getSrno())) {
                    message = " Your Desired Record is Deleted. ";
                    bindTableDetails();
                } else {
                    message = " Sorry, Cann't Delete this Record " + action.getErrormessage();
                }
                JOptionPane.showMessageDialog(this, message);
            }
        }
        srno = 0;
    }

    private void editRecord() {
        if (srno != 0) {
            AllCommonOperations.openInternalFrames(getDesktopPane(), new AddFlightPrice(srno));
            dispose();

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableflightprice = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setTitle("View Flight Price");

        tableflightprice.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableflightprice.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableflightpriceMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableflightprice);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 618, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(37, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(56, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tableflightpriceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableflightpriceMouseClicked
        if (evt.getButton() == MouseEvent.BUTTON3) {
            int point = tableflightprice.rowAtPoint(evt.getPoint());
            tableflightprice.getSelectionModel().setSelectionInterval(point, point);
            srow = tableflightprice.getSelectedRow();
            srno = Integer.parseInt(tableflightprice.getValueAt(srow, 0).toString());
            popup.show(tableflightprice, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_tableflightpriceMouseClicked
    private void bindTableDetails() {
        alldetails = new FlightPriceDao().getAllRecord();
        String[] col_names = {"Srno ", " Category Name ", " Flight Id", " Price", "Discount", "Total Seats"};
        Object[][] records = null;
        if (alldetails != null && alldetails.size() > 0) {
            records = new Object[alldetails.size()][col_names.length];
            int i = 0;
            for (FlightPriceTo ft : alldetails) {
                records[i] = new Object[]{ft.getSrno(), ft.getCategoryname(), ft.getFlightid(), ft.getPrice(), ft.getDiscount(), ft.getTotalseat()};
                i++;
            }
        } else {
            records = new Object[1][col_names.length];
            records[0] = new Object[]{"No Records", "No Records", "No Records", "No Records", "No Records", "No Records"};
        }

        DefaultTableModel dtm = new DefaultTableModel(records, col_names) {

            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        tableflightprice.getTableHeader().setReorderingAllowed(false);
        tableflightprice.setModel(dtm);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableflightprice;
    // End of variables declaration//GEN-END:variables
}
