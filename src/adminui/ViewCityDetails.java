/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package adminui;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.table.DefaultTableModel;
import model.dao.CityInfoDao;
import model.to.CityInfoTo;
import utility.AllCommonOperations;

/**
 *
 * @author Pavneet
 */
public class ViewCityDetails extends javax.swing.JInternalFrame {

    /**
     * Creates new form ViewCityDetails
     */
    List<CityInfoTo> alldetails;
    private int srow;
    private JPopupMenu popup;

    public ViewCityDetails() {
        initComponents();
        bindTableDetails();
        tableCityInfo.setRowHeight(25);
        tableCityInfo.setShowGrid(true);
        tableCityInfo.setBackground(new Color(0,150,200));
        tableCityInfo.setForeground(Color.WHITE);
        tableCityInfo.setSelectionBackground(Color.white);
        tableCityInfo.setSelectionForeground(new Color(0,150,200));
        srow = -1;
        popup = new JPopupMenu();
        JMenuItem deleterecord = new JMenuItem(" Delete Record");
        deleterecord.setFont(new Font("Times New Roman", Font.BOLD, 25));
        JMenuItem editrecord = new JMenuItem(" Edit Record");
        editrecord.setFont(new Font("Times New Roman", Font.BOLD, 25));
        try {
            ImageIcon icon = new ImageIcon(getClass().getResource("/adminui/delete1.png"));
            deleterecord.setIcon(icon);
        } catch (Exception ex) {
        }
        try {
            ImageIcon icon = new ImageIcon(getClass().getResource("/adminui/add.png"));
            editrecord.setIcon(icon);
        } catch (Exception ex) {
        }
        popup.add(deleterecord);
        popup.add(editrecord);
        deleterecord.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                deleteRecord();
            }
        });

        editrecord.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                editRecord();
            }
        });
    }

    private void deleteRecord() {
        if (srow != -1 && alldetails != null && srow < alldetails.size()) {
            int result = JOptionPane.showConfirmDialog(this, "Do You Really Want to Delete this record ?", "Message From System", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                CityInfoTo ct = alldetails.get(srow); 
                CityInfoDao action = new CityInfoDao();
                String message = "";
                if (action.deleteRecord(ct.getCityid())) {
                    message = " Your Desired Record is Deleted. ";
                    bindTableDetails();
                } else {
                    message = " Sorry, Cann't Delete this Record " + action.getErrormessage();
                }
                JOptionPane.showMessageDialog(this, message);
            }
        }
        srow = -1;
    }


    private void editRecord() {
        if (srow != -1 && alldetails != null && srow < alldetails.size()) {
            AllCommonOperations.openInternalFrames(getDesktopPane(), new AddCityInfo(alldetails.get(srow)));
            dispose();

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableCityInfo = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setTitle("View City Details");

        tableCityInfo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tableCityInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableCityInfo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableCityInfoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableCityInfo);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(84, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(61, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tableCityInfoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableCityInfoMouseClicked
        if (evt.getButton() == MouseEvent.BUTTON3) {
            int point = tableCityInfo.rowAtPoint(evt.getPoint());
            tableCityInfo.getSelectionModel().setSelectionInterval(point, point);
            srow = tableCityInfo.getSelectedRow();
            popup.show(tableCityInfo, evt.getX(), evt.getY());

        }
    }//GEN-LAST:event_tableCityInfoMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableCityInfo;
    // End of variables declaration//GEN-END:variables

    private void bindTableDetails() {
        alldetails = new CityInfoDao().getAllRecord();
        String[] col_names = {" City Id ", " City Name ", " Country Name"};
        Object[][] records = null;
        if (alldetails != null && alldetails.size() >  0) {
            records = new Object[alldetails.size()][col_names.length];
            int i = 0;
            for (CityInfoTo ct : alldetails) {
                records[i] = new Object[]{ct.getCityid(), ct.getCityname(), ct.getCountryname()};
                i++;
            } 
        } else {
            records = new Object[1][col_names.length];
            records[0] = new Object[]{"No Records", "No Records", " No Records"};
        }

        DefaultTableModel dtm = new DefaultTableModel(records, col_names) {

            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        tableCityInfo.getTableHeader().setReorderingAllowed(false);
        tableCityInfo.setModel(dtm);
    }
}
