/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package adminui;

import java.util.List;
import javax.swing.JOptionPane;
import model.dao.AirlineInfoDao;
import model.dao.BookingInfoDao;
import model.dao.CityInfoDao;
import model.dao.ClassCategoryDao;
import model.dao.CommonDao;
import model.dao.FlightInfoDao;
import model.dao.FlightPriceDao;
import model.to.AirlineInfoTo;
import model.to.CityInfoTo;
import model.to.ClassCategoryTo;
import model.to.FlightInfoTo;
import model.to.FlightPriceTo;
import utility.AllCommonOperations;
import utility.Validations;

/**
 *
 * @author Pavneet
 */
public class AddFlightPrice extends javax.swing.JInternalFrame {

    /**
     * Creates new form AddFlightPrice
     */
    private int srno;

    public AddFlightPrice() {
        initComponents();
        getRootPane().setDefaultButton(btnFlightPrice);
        jcbCategoryid.removeAllItems();
        jcbCategoryid.addItem("Select Any Class Category Id");
        List<ClassCategoryTo> categories = new ClassCategoryDao().getAllRecord();
        if (categories != null && categories.size() > 0) {
            for (ClassCategoryTo category : categories) {
                jcbCategoryid.addItem(category);
            }
        }
        jcbFlightId.removeAllItems();;
        jcbFlightId.addItem("Select Flight ");

        jcbSourceCity.removeAllItems();
        jcbSourceCity.addItem("Select Source City");
        List<CityInfoTo> scitys = new CityInfoDao().getAllRecord();
        if (scitys != null && scitys.size() > 0) {
            for (CityInfoTo scity : scitys) {
                jcbSourceCity.addItem(scity);
            }
        }

    }

    public AddFlightPrice(int srno) {
        this();
        FlightPriceTo record = new FlightPriceDao().getRecord(srno);
        if (record != null) {
            this.srno = srno;
            for (int i = 1; i < jcbCategoryid.getItemCount(); i++) {
                ClassCategoryTo cc = (ClassCategoryTo) jcbCategoryid.getItemAt(i);
                if(cc.getCategoryid().equals(record.getCategoryid())){
                    jcbCategoryid.setSelectedIndex(i);
                }
            }
            for (int i = 1; i < jcbFlightId.getItemCount(); i++) {
                FlightInfoTo ft = (FlightInfoTo) jcbFlightId.getItemAt(i);
                if(ft.getFlightid()==record.getFlightid()){
                    jcbFlightId.setSelectedIndex(i);
                }
            }
            int fid;
            fid=record.getFlightid();
            FlightInfoTo res=new FlightInfoDao().getRecord(fid);
            for (int i = 1; i < jcbSourceCity.getItemCount(); i++) {
                CityInfoTo sc =  (CityInfoTo) jcbSourceCity.getItemAt(i);
                if(sc.getCityid()==res.getSourcecityid()){
                    jcbSourceCity.setSelectedIndex(i);
                }
            }
            for (int i = 1; i < jcbDestinationCity.getItemCount(); i++) {
                CityInfoTo sc =  (CityInfoTo) jcbDestinationCity.getItemAt(i);
                if(sc.getCityid()==res.getSourcecityid()){
                    jcbDestinationCity.setSelectedIndex(i);
                }
            }
            jtfFlightPrice.setText(String.valueOf(record.getPrice()));
            jtfDiscount.setText(String.valueOf(record.getDiscount()));
            jtfTotalSeat.setText(String.valueOf(record.getTotalseat()));
            setTitle("Edit Records in Database");
            btnFlightPrice.setText("Update Records");
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jtfTotalSeat = new javax.swing.JTextField();
        jtfFlightPrice = new javax.swing.JTextField();
        jtfDiscount = new javax.swing.JTextField();
        jcbCategoryid = new javax.swing.JComboBox();
        btnFlightPrice = new javax.swing.JButton();
        jcbSourceCity = new javax.swing.JComboBox();
        jcbDestinationCity = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jcbFlightId = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setResizable(true);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel3.setText("Select Class Category:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel6.setText("Enter Flight Price:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel5.setText("Enter Discount:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel4.setText("Enter Total Flight Seats:");

        jtfTotalSeat.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N

        jtfFlightPrice.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N

        jtfDiscount.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N

        jcbCategoryid.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jcbCategoryid.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnFlightPrice.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        btnFlightPrice.setText("Add Flight Price");
        btnFlightPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFlightPriceActionPerformed(evt);
            }
        });

        jcbSourceCity.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jcbSourceCity.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbSourceCity.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbSourceCityItemStateChanged(evt);
            }
        });

        jcbDestinationCity.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jcbDestinationCity.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbDestinationCity.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbDestinationCityItemStateChanged(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Select Source City:");

        jcbFlightId.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jcbFlightId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel2.setText("Select Destination City :");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel7.setText("Select Flight :");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(147, 147, 147)
                .addComponent(btnFlightPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 436, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(103, 103, 103)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtfTotalSeat, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jtfDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jtfFlightPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(30, 30, 30))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(76, 76, 76)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jcbSourceCity, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jcbDestinationCity, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jcbCategoryid, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jcbFlightId, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(44, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcbCategoryid, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jcbSourceCity, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jcbDestinationCity, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcbFlightId, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfFlightPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfTotalSeat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnFlightPrice)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnFlightPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFlightPriceActionPerformed
        String message = "";
        boolean allvalid = true;
        String price = jtfFlightPrice.getText().trim();
        String discount = jtfDiscount.getText().trim();
        String totalseat = jtfTotalSeat.getText().trim();
        if (Validations.isEmpty(price)) {
            allvalid = false;
            message += "\n\n Please Enter the Price";
        } else if (Validations.isFloat(price)) {
            float p = Float.parseFloat(price);
            if (p <= 0) {
                message += "\n\nPlease Enter Valid Price";
                allvalid = false;
            }
        } else {
            message += "\n\nPlease Enter Numeric Value in Price Field";
            allvalid = false;
        }
        if (Validations.isEmpty(discount)) {
            allvalid = false;
            message += "\n\n Please Enter the Discount";
        } else if (Validations.isFloat(discount)) {
            float p = Float.parseFloat(price);
            float d = Float.parseFloat(discount);
          //s  System.out.println(p + "\t" + d);
            if (d < 0 || d > 100) {
                message += "\n\n Please Enter Valid Discount";
                allvalid = false;
            }
        } else {
            message += "\n\nPlease Enter Numeric Value in Discount Field";
            allvalid = false;
        }
        if (jcbCategoryid.getSelectedIndex() == 0) {
            message += "\n\n  Please Select the Class Category";
            allvalid = false;
        }
        if (jcbFlightId.getSelectedIndex() == 0) {
            message += "\n\n  Please Select the Flight Id";
            allvalid = false;
        }
        if (jcbSourceCity.getSelectedIndex() == 0) {
            message += "\n\n  Please Select the Flight Id";
            allvalid = false;
        }
        if (jcbDestinationCity.getSelectedIndex() == 0) {
            message += "\n\n  Please Select the Flight Id";
            allvalid = false;
        }
        if (Validations.isEmpty(totalseat)) {
            allvalid = false;
            message += " \n\n Please Enter Total number of Seats Booked ";
        } else if (!Validations.isNumeric(totalseat)) {
            allvalid = false;
            message += "\n\n Please Enter Numeric Value";
        } else {
            int tseat = Integer.parseInt(totalseat);
            if (tseat < 1) {
                allvalid = false;
                message += " \n Please Enter Valid Amount of seats";
            }
        }
        if (allvalid) {
            FlightPriceTo record = new FlightPriceTo();
            record.setPrice(Float.parseFloat(price));
            record.setDiscount(Float.parseFloat(discount));
            FlightInfoTo ft = (FlightInfoTo) jcbFlightId.getSelectedItem();
            record.setFlightid(ft.getFlightid());
            ClassCategoryTo cc = (ClassCategoryTo) jcbCategoryid.getSelectedItem();
            record.setCategoryid(cc.getCategoryid());
            int tseat = Integer.parseInt(totalseat);
            record.setTotalseat(tseat);
            FlightPriceDao action = new FlightPriceDao();
            if (btnFlightPrice.getText().equals("Add")) {
                if (action.insertRecord(record)) {
                    message = "\n Price Details Of Flight is Saved. ";
                    jcbCategoryid.setSelectedIndex(0);
                    jcbFlightId.setSelectedIndex(0);
                    jtfFlightPrice.setText(null);
                    jtfDiscount.setText(null);
                    jtfTotalSeat.setText(null);
                } else {
                    allvalid = false;
                    message = "\n Failure occur cann't insert Flight Price " + action.getErrormessage();
                }
            } else if (btnFlightPrice.getText().equals("Update")) {
                record.setSrno(srno);
                System.out.println("record "+srno);
                if (action.updateRecord(record)) {
                    message = "Flight Price is Updated in System";
                } else {
                    message = "Updation Failure :: " + action.getErrormessage();
                    allvalid = false;
                }
                AllCommonOperations.openInternalFrames(getDesktopPane(), new ViewPriceDetails());
                dispose();
            }
        } 
        if (allvalid) {
            JOptionPane.showMessageDialog(this, message);
        } else {
            JOptionPane.showMessageDialog(this, message, "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnFlightPriceActionPerformed

    private void jcbSourceCityItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbSourceCityItemStateChanged
        jcbDestinationCity.removeAllItems();
        jcbDestinationCity.addItem("Select Destination City");
        if (jcbSourceCity.getSelectedIndex() > 0) {
            CityInfoTo ct = (CityInfoTo) jcbSourceCity.getSelectedItem();
            List<CityInfoTo> dcitys = new CityInfoDao().getDestinationCity(ct.getCityid());
            if (dcitys != null && dcitys.size() > 0) {
                for (CityInfoTo dcity : dcitys) {
                    jcbDestinationCity.addItem(dcity);
                }
            }
        }

    }//GEN-LAST:event_jcbSourceCityItemStateChanged

    private void jcbDestinationCityItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbDestinationCityItemStateChanged
        jcbFlightId.removeAllItems();;
        jcbFlightId.addItem("Select Flight ");
        if (jcbDestinationCity.getSelectedIndex() > 0) {
            CityInfoTo sc = (CityInfoTo) jcbSourceCity.getSelectedItem();
            CityInfoTo dc = (CityInfoTo) jcbDestinationCity.getSelectedItem();
            List<FlightInfoTo> ft = new FlightInfoDao().getFlightId(sc.getCityid(), dc.getCityid());
            if (ft != null && ft.size() > 0) {
                for (FlightInfoTo fid : ft) {
                    jcbFlightId.addItem(fid);
                }
            }
        }
    }//GEN-LAST:event_jcbDestinationCityItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFlightPrice;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JComboBox jcbCategoryid;
    private javax.swing.JComboBox jcbDestinationCity;
    private javax.swing.JComboBox jcbFlightId;
    private javax.swing.JComboBox jcbSourceCity;
    private javax.swing.JTextField jtfDiscount;
    private javax.swing.JTextField jtfFlightPrice;
    private javax.swing.JTextField jtfTotalSeat;
    // End of variables declaration//GEN-END:variables
}
